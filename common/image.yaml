{{- $board := .board -}}
{{- $distro := .distro -}}
{{- $suite := .suite -}}
{{- $flavor := .flavor -}}

{{- $soc := .soc -}}
{{- $soc_family := .soc_family -}}
{{- $image := .image -}}
{{- $efi_end := or .efi_end "32MiB" -}}
{{- $partition_type := .partition_type -}}

{{- $kernel := .kernel -}}
{{- $firmware := .firmware -}}
{{- $install_vendor_package := or .install_vendor_package "true" -}}

{{- $radxa_mirror := "https://radxa-repo.github.io/apt" -}}

{{- $architecture := .architecture -}}

architecture: {{ $architecture }}

actions:
  - action: unpack
    description: Unpack rootfs
    file: .rootfs/{{ $distro }}_{{ $suite }}_{{ $flavor }}.tar
    
  - action: image-partition
    description: Set up on-disk layout
    imagename: {{ $image }}
    imagesize: 5GiB
    partitiontype: {{ $partition_type }}
    mountpoints:
      - mountpoint: /
        partition: rootfs
      - mountpoint: /config
        partition: config
        options: [ x-systemd.automount ]
{{ if eq $soc_family "generic" }}
      - mountpoint: /boot/efi
        partition: boot
        options: [ x-systemd.automount ]
{{ end }}
    partitions:
      - name: config
        fs: vfat
        start: 16MiB
        end: 32MiB
{{ if eq $soc_family "generic" }}
      - name: boot
        fs: vfat
        start: 32MiB
        end: {{ $efi_end }}
        flags: [ boot, esp ]
{{ end }}
      - name: rootfs
        fs: ext4
        start: {{ $efi_end }}
        end: 100%
        flags: [ boot ]

  - action: filesystem-deploy
    description: Deploying filesystem onto image
    setup-fstab: true
    # u-boot-menu will add root= in append for us
    setup-kernel-cmdline: false

{{ if ne $soc_family "generic" }}

  {{ if eq $firmware "" }}

  - action: apt
    description: Install Radxa firmware
    packages:
      - u-boot-{{ $board }}

  {{ else }}

  - action: recipe
    description: Install custom firmware
    recipe: hack_install_deb.yaml
    variables:
      name: {{ $firmware }}

  {{ end }}
  
  - action: run
    description: Apply to disk
    chroot: true
    command: |
      set -e
      ROOTPART="$(mount | grep " on / " | cut -d ' ' -f 1)"
      ROOTDEV="$(lsblk -no pkname $ROOTPART)"
      TARGET="/dev/$ROOTDEV"
      echo "Writting to $TARGET"
      /usr/lib/u-boot-{{ $board }}/setup.sh update_bootloader "$TARGET" {{ $soc_family }}

{{ end }}

{{ if eq $kernel "" }}

  {{ if eq $soc_family "generic" }}

    - action: apt
      description: Install upstream kernel
      packages:
    {{ if eq $distro "debian" }}
        - linux-image-{{ $architecture }}
    {{ else if eq $distro "ubuntu" }}
        - linux-image-generic
    {{ end }}

  {{ else }}

  - action: apt
    description: Install Radxa kernel
    packages:
      - linux-image-{{ $board }}

  {{ end }}

{{ else }}

  - action: recipe
    description: Install custom kernel
    recipe: hack_install_deb.yaml
    variables:
      name: {{ $kernel }}

{{ end }}

{{ if and (eq $install_vendor_package "true") (eq $flavor "kde") (eq $distro "debian") }}

  - action: recipe
    description: Add {{ $soc_family }}-{{ $suite }} Repo
    recipe: add_repo.yaml
    variables:
      origin: radxa-{{ $soc_family }}
      suite: {{ $soc_family }}-{{ $suite }}
      base_url: {{ $radxa_mirror }}
      priority: 1001

  - action: run
    description: Downgrade to vendor packages
    chroot: true
    command: |
      set -e
      apt update
      apt full-upgrade -y --allow-downgrades

  - action: apt
    description: Install task-{{ $board }} package
    packages:
      - task-{{ $board }}

  - action: overlay
    description: Install vendor overlays
    source: overlays/{{ $soc_family }}
    destination: /

{{ end }}

  - action: run
    description: Preload device tree overlay from default kernel
    chroot: true
    script: copy_overlay.bash {{ $soc_family }}

  - action: run
    description: Product specific setup
    chroot: true
    command: |
      set -e
      rsetup update_hostname {{ $board }}

  - action: recipe
    description: Clean up rootfs
    recipe: clean.yaml
