{{- $board := .board -}}
{{- $distro := .distro -}}
{{- $suite := .suite -}}
{{- $flavor := .flavor -}}
{{- $repo_prefix := .repo_prefix -}}
{{- $radxa_mirror := .radxa_mirror -}}

{{- $soc := .soc -}}
{{- $soc_family := .soc_family -}}
{{- $image := .image -}}
{{- $efi_end := or .efi_end "332MiB" -}}
{{- $partition_type := .partition_type -}}

{{- $kernel := .kernel -}}
{{- $kernel_dbg := .kernel_dbg -}}
{{- $header := .header -}}
{{- $firmware := .firmware -}}
{{- $overlay := .overlay -}}
{{- $install_vendor_package := or .install_vendor_package "true" -}}

{{- $rbuild_rev := .rbuild_rev -}}
{{- $rbuild_cmd := .rbuild_cmd -}}
{{- $dkms := .dkms -}}

{{- $architecture := .architecture -}}

architecture: {{ $architecture }}

actions:
  - action: image-partition
    description: Set up swap
    imagename: .swap.img
    imagesize: 4GiB
    partitiontype: gpt

  - action: run
    description: Enable swap device
    command: |
      set -e
      if [ -b /dev/vda ]
      then
        if ! swapon | grep /dev/vda >/dev/null
        then
          mkswap -f /dev/vda
          swapon /dev/vda
        fi
      else
        if [ ! -f /swapfile_rbuild ]
        then
          dd if=/dev/zero of=/swapfile_rbuild bs=1M count=4096 status=progress
          chmod 0600 /swapfile_rbuild
          mkswap -f /swapfile_rbuild
        fi
        if ! swapon | grep /swapfile_rbuild >/dev/null
        then
          swapon /swapfile_rbuild
        fi
      fi

  - action: image-partition
    description: Set up on-disk layout
    imagename: {{ $image }}
    imagesize: 6GiB
    partitiontype: {{ $partition_type }}
    mountpoints:
      - mountpoint: /
        partition: rootfs
      - mountpoint: /config
        partition: config
        options: [ x-systemd.automount ]
      - mountpoint: /boot/efi
        partition: boot
        options: [ x-systemd.automount ]
    partitions:
      - name: config
        fs: vfat
        start: 16MiB
        end: 32MiB
      - name: boot
        fs: vfat
        start: 32MiB
        end: {{ $efi_end }}
        flags: [ boot, esp ]
      - name: rootfs
        fs: ext4
        start: {{ $efi_end }}
        end: 100%
        flags: [ boot ]

  - action: unpack
    description: Unpack rootfs
    file: .rootfs/{{ $distro }}_{{ $suite }}{{ $repo_prefix }}_{{ $flavor }}.tar

  - action: filesystem-deploy
    description: Deploying filesystem onto image
    setup-fstab: true
    # u-boot-menu will add root= in append for us
    setup-kernel-cmdline: false

{{ if and (ne $install_vendor_package "false") (ne $flavor "cli") (eq $distro "debian") }}

  {{ if eq $install_vendor_package "true" }}

  - action: recipe
    description: Add {{ $soc_family }}-{{ $suite }} Repo
    recipe: scripts/add_radxa_repo.yaml
    variables:
      origin: radxa-{{ $soc_family }}
      suite: {{ $soc_family }}-{{ $suite }}{{ $repo_prefix }}
      repo: {{ $suite }}{{ $repo_prefix }}
      radxa_mirror: {{ $radxa_mirror }}
      priority: 1001

  - action: apt
    description: Install task-{{ $board }} package
    packages:
      - task-{{ $board }}

  - action: run
    description: Downgrade to vendor packages
    chroot: true
    command: |
      set -e
      apt-get update
      apt-get full-upgrade -y --allow-downgrades
      apt-get autoremove -y --purge

  - action: overlay
    description: Install vendor overlays
    source: overlays/{{ $soc_family }}
    destination: /

  {{ else }}

  - action: recipe
    description: Add {{ $soc_family }}-{{ $suite }} Repo
    recipe: scripts/add_radxa_repo.yaml
    variables:
      origin: radxa-{{ $soc_family }}
      suite: {{ $soc_family }}-{{ $suite }}
      repo: {{ $suite }}{{ $repo_prefix }}
      radxa_mirror: {{ $radxa_mirror }}
      priority: 100

  - action: apt
    description: Install {{ $install_vendor_package }} package
    packages:
      - {{ $install_vendor_package }}

  {{ end }}

{{ end }}

{{ if ne $soc_family "generic" }}

  {{ if eq $firmware "" }}

  - action: apt
    description: Install Radxa firmware
    packages:
      - u-boot-{{ $board }}

  {{ else }}

  - action: recipe
    description: Install custom firmware
    recipe: scripts/hack_install_deb.yaml
    variables:
      name: {{ $firmware }}

  {{ end }}
  
  - action: run
    description: Apply to disk
    chroot: true
    command: |
      set -e
      ROOTPART="$(mount | grep " on / " | cut -d ' ' -f 1)"
      ROOTDEV="$(lsblk -no pkname $ROOTPART)"
      TARGET="/dev/$ROOTDEV"
      echo "Writting to $TARGET"
      /usr/lib/u-boot/{{ $board }}/setup.sh update_bootloader "$TARGET" {{ $soc_family }}

{{ end }}

{{ if eq $kernel "" }}

  {{ if eq $soc_family "generic" }}

    - action: apt
      description: Install upstream kernel
      packages:
    {{ if eq $distro "debian" }}
        - linux-image-{{ $architecture }}
    {{ else if eq $distro "ubuntu" }}
        - linux-image-generic
    {{ end }}

  {{ else }}

  - action: apt
    description: Install Radxa kernel
    packages:
      - linux-image-{{ $board }}

  {{ end }}

{{ else }}

  - action: recipe
    description: Install custom kernel
    recipe: scripts/hack_install_deb.yaml
    variables:
      name: {{ $kernel }}

{{ end }}

{{ if ne $kernel_dbg "" }}

  - action: recipe
    description: Install custom debug kernel
    recipe: scripts/hack_install_deb.yaml
    variables:
      name: {{ $kernel_dbg }}

{{ end }}

{{ if eq $header "" }}

  {{ if eq $soc_family "generic" }}

    - action: apt
      description: Install upstream kernel header
      packages:
    {{ if eq $distro "debian" }}
        - linux-headers-{{ $architecture }}
    {{ else if eq $distro "ubuntu" }}
        - linux-headers-generic
    {{ end }}

  {{ else }}

  - action: apt
    description: Install Radxa kernel header
    packages:
      - linux-headers-{{ $board }}

  {{ end }}

{{ else }}

  - action: recipe
    description: Install custom kernel header
    recipe: scripts/hack_install_deb.yaml
    variables:
      name: {{ $header }}

{{ end }}

{{ if ne $dkms "" }}

  - action: recipe
    description: Install dkms packages
    recipe: scripts/dkms.yaml
    variables:
      dkms: {{ $dkms }}

{{ end }}

{{ if $overlay }}

  - action: recipe
    description: Enable overlay {{ $overlay }}
    recipe: scripts/enable_overlay.yaml
    variables:
      overlay: {{ $overlay }}

{{ end }}

  - action: run
    description: Product specific setup
    chroot: true
    command: |
      set -e
      rsetup update_hostname {{ $board }}
      echo "RBUILD_BUILD_DATE='$(date -R)'" > /etc/radxa_image_fingerprint
      echo "RBUILD_REVISION='{{ $rbuild_rev }}'" >> /etc/radxa_image_fingerprint
      echo "RBUILD_COMMAND='{{ $rbuild_cmd }}'" >> /etc/radxa_image_fingerprint
      pkg_info="$(dpkg-query -f '${binary:Package} ${Version}\n' -W | grep -v -e {{ $board }} | grep linux-image)"
      echo "RBUILD_KERNEL='$(echo $pkg_info | cut -d ' ' -f 1)'" >> /etc/radxa_image_fingerprint
      echo "RBUILD_KERNEL_VERSION='$(echo $pkg_info | cut -d ' ' -f 2)'" >> /etc/radxa_image_fingerprint
      pkg_info="$(dpkg-query -f '${binary:Package} ${Version}\n' -W | grep -v -e {{ $board }} -e u-boot-menu -e u-boot-tools | grep u-boot)"
      echo "RBUILD_UBOOT='$(echo $pkg_info | cut -d ' ' -f 1)'" >> /etc/radxa_image_fingerprint
      echo "RBUILD_UBOOT_VERSION='$(echo $pkg_info | cut -d ' ' -f 2)'" >> /etc/radxa_image_fingerprint

  - action: recipe
    description: Clean up rootfs
    recipe: scripts/clean.yaml

  - action: run
    description: Clean up swap device
    command: |
      set -e
      if swapon | grep /dev/vda >/dev/null
      then
        swapoff /dev/vda
      fi
      if swapon | grep /swapfile_rbuild >/dev/null
      then
        swapoff /swapfile_rbuild
      fi
      if [ -f /swapfile_rbuild ]
      then
        rm /swapfile_rbuild
      fi

{{ if eq $suite "bookworm" }}
  - action: run
    description: Workaround cloud-initramfs-growroot bug
    chroot: true
    command: |
      echo "copy_exec /usr/bin/grep /bin" >> /usr/share/initramfs-tools/hooks/growroot
      echo "copy_exec /usr/bin/sed /bin" >> /usr/share/initramfs-tools/hooks/growroot
      echo "copy_exec /usr/bin/rm /bin" >> /usr/share/initramfs-tools/hooks/growroot
      echo "copy_exec /usr/bin/awk /bin" >> /usr/share/initramfs-tools/hooks/growroot
{{ end }}

  - action: run
    description: Rebuild initramfs to not waiting for (now missing) suspend/resume device
    chroot: true
    command: |
      set -e
      update-initramfs -u
